---
layout: post
title:  "Itertools 0.5.0"
date:   2016-09-26 21:20:00 +0200
categories: rust
---

[**itertools**][1] is a Rust library that provides extra functionality
for Rust’s iterators: extra adaptors, methods, free functions, and macros.
We are now releasing version 0.5.0, which is a significant step up in consistency
and clarity.

[1]: https://crates.io/crates/itertools

The release goals were:

> We want to increase consistency, keep all the very useful stuff, remove the
> things that are never used, and move out the things that are better off in
> other crates.

The main user-noticable features are intended to be that [**the docs**][docs] are easier to
navigate, useful things now have shorter names, and there are lots of free
functions in the crate’s root, previously hidden inside `itertools::free`.

[docs]: https://bluss.github.io/rust-itertools/

One popular and really useful feature that got a shorter name is
[`.format()`][2], which allows you to format each element in an iterator:

{% highlight rust %}
use itertools::Itertools;

let data = [1.1, 2.71828, -3.];
println!("{:.2}", data.iter().format(", "));
// output is "1.10, 2.72, -3.00"
{% endhighlight %}

Other renames are `.group_by_lazy()` → [`.group_by()`][groupby] and `.chunks_lazy()` →
[`.chunks()`][chunks], and many others. The most used items, like these mentioned,
have the old name remain with a deprecation warning (this is also the first release
where the required Rust version is such that we can use deprecation warnings).

[groupby]: https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.group_by
[chunks]: https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.chunks

[2]: https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.format

When it comes to free functions, this one is my favourite, it’s just the usual
`.enumerate()` in a new form:

{% highlight rust %}
use itertools::enumerate;

let values = vec![0; 16];
for (i, elt) in enumerate(&mut values) {
    /* loop body */
}
{% endhighlight %}

What I see here is the power shift that occurred when `IntoIterator` was introduced.
We chain iterator adaptors on *Iterators*, but iteration almost all start out
with *IntoIterators*.  Free functions are now often just as neat to use, since
we can call them on iterables directly, without manual calls to `.iter()`,
`.iter_mut()` and so on. Another up and coming free function is
[`cloned(&collection)`][cl]!

[cl]: https://bluss.github.io/rust-itertools/doc/itertools/fn.cloned.html

There were new features in 0.5 too! As a last minute thing, [@malbarbo
contributed][151] a generalization of the pairs of combinations iterator that was
previously called `.combinations()`; it is now [`.tuple_combinations()`][tc] which
handles 1 to 4-tuples of combinations:

[151]: https://github.com/bluss/rust-itertools/pull/151
[tc]: https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.tuple_combinations

{% highlight rust %}
use itertools::Itertools;

for (i, j, k) in (1..5).tuple_combinations() {
    // The loop goes through
    // (1, 2, 3) (1, 2, 4), (1, 3, 4), (2, 3, 4) and then it's done.
    // remember: in combinations the order of the elements does not matter,
    // in permutations it does.
}
{% endhighlight %}

Another new feature is [Either][eit]. It is an enum with variants `Left` and
`Right`. It's very generic, but itertools reexports it for a couple of reasons:
[`.partition_map()`][pm] already needs generic selection of elements to either the
left or right side; `Either<L, R>` implements `Iterator` itself when `L` and
`R` are iterators and is thus its own kind of adapter; and lastly, we can use
`Either` to express some more nice iterator adapters in the future
([ideas][bug]).

[pm]: https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.partition_map

I took care to bump [crate `either`][either] to version 1.0 before pushing it into the
limelight like this, in case it proliferates we want its version story to be
friction free from here on out.

[eit]: https://bluss.github.io/rust-itertools/doc/itertools/enum.Either.html
[either]: https://crates.io/crates/either
[bug]: https://github.com/bluss/rust-itertools/issues/129

The last job the 0.5 release had was to remove unstable, unused or ill fitting
parts of the library. `mend_slices` is super cool but doesn't have a real
use case, so we pawn it off to crate [odds][odds] along with slice-focused
tools `Stride` and `StrideMut`. `linspace` needs numerical traits, so it lives in
[itertools-num][in] now.

The [full changelog is in the README][chl]. These were mostly just the breaking
changes, we’ll continue to add a few features now that we have a nice clean
base.

[odds]: https://crates.io/crates/odds
[in]: https://crates.io/crates/itertools-num
[chl]: https://github.com/bluss/rust-itertools#recent-changes
